#!/usr/bin/env python

"""
This script aims to make it more convenient to run various tests using
different configs.
"""
import os
import subprocess as sp
import sys
from pathlib import Path

HERE = Path(__file__).resolve().parent
TOPLEVEL = Path(__file__).resolve().parent.parent


def get_data(kinds="all", branch="master", verbose=True):
    """
    Download the test data from the lcdb-test-data repo
    """
    URL = "https://github.com/lcdb/lcdb-test-data/blob/{0}/data/{{}}?raw=true".format(
        branch
    )
    data_files = {
        "rnaseq": [
            (
                "rnaseq_samples/sample1/sample1.small_R1.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample1.fq.gz",
            ),
            (
                "rnaseq_samples/sample2/sample2.small_R1.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample2.fq.gz",
            ),
            (
                "rnaseq_samples/sample3/sample3.small_R1.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample3.fq.gz",
            ),
            (
                "rnaseq_samples/sample4/sample4.small_R1.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample4.fq.gz",
            ),
            (
                "rnaseq_samples/sample1/sample1.small_R1.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample1PE_1.fq.gz",
            ),
            (
                "rnaseq_samples/sample1/sample1.small_R2.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample1PE_2.fq.gz",
            ),
            (
                "rnaseq_samples/sample2/sample2.small_R1.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample2PE_1.fq.gz",
            ),
            (
                "rnaseq_samples/sample2/sample2.small_R2.fastq.gz",
                "workflows/rnaseq/data/example_data/rnaseq_sample2PE_2.fq.gz",
            ),
        ],
        "chipseq": [
            (
                "chipseq_samples/input_1/input_1.tiny_R1.fastq.gz",
                "workflows/chipseq/data/example_data/chipseq_input1.fq.gz",
            ),
            (
                "chipseq_samples/input_2/input_2.tiny_R1.fastq.gz",
                "workflows/chipseq/data/example_data/chipseq_input2.fq.gz",
            ),
            (
                "chipseq_samples/input_3/input_3.tiny_R1.fastq.gz",
                "workflows/chipseq/data/example_data/chipseq_input3.fq.gz",
            ),
            (
                "chipseq_samples/ip_1/ip_1.tiny_R1.fastq.gz",
                "workflows/chipseq/data/example_data/chipseq_ip1.fq.gz",
            ),
            (
                "chipseq_samples/ip_2/ip_2.tiny_R1.fastq.gz",
                "workflows/chipseq/data/example_data/chipseq_ip2.fq.gz",
            ),
            (
                "chipseq_samples/ip_3/ip_3.tiny_R1.fastq.gz",
                "workflows/chipseq/data/example_data/chipseq_ip3.fq.gz",
            ),
            (
                "chipseq_samples/ip_4/ip_4.tiny_R1.fastq.gz",
                "workflows/chipseq/data/example_data/chipseq_ip4.fq.gz",
            ),
        ],
    }
    cwd = os.getcwd()
    if str(cwd) != str(TOPLEVEL):
        raise ValueError(f"cwd: {cwd}; Please run this from the top level of the repo")
    if kinds == "all":
        kinds = list(data_files.keys())
    for kind in kinds:
        for fn, dest in data_files[kind]:
            url = URL.format(fn)
            if verbose:
                print(f"downloading {url}")
            if dest is None:
                dest = fn
            dest = Path(dest)
            dest.parent.mkdir(parents=True, exist_ok=True)
            sp.run(f"wget -q -O- {url} > {dest}", shell=True, check=True)

def run_pytest():
    sp.run(["pytest", "--doctest-modules", "lib"], check=True)

def run_url_check():
    sys.path.insert(0, str(TOPLEVEL))
    from lib.common import check_all_urls_found
    check_all_urls_found()

def r_package_check(env_r='./env-r'):
    sp.run([f"{env_r}/bin/Rscript", "-e", "testthat::test('lib/lcdbwf', export_all=TRUE)"])

def snakefile(directory, args=None):
    sp.run(['bash', 'run_test.sh'] + args, cwd=TOPLEVEL / directory, check=True)


if __name__ == "__main__":

    import argparse

    ap = argparse.ArgumentParser()
    ap.add_argument(
        "--get-data",
        action="store_true",
        help="Download example data. See --kinds argument for controlling this",
    )
    ap.add_argument(
        "--kinds",
        nargs="+",
        default="all",
        choices=["chipseq", "rnaseq", "all"],
        help="Download data for which workflows?"
    )


    ap.add_argument('--env', default='./env', help="Specify main conda env. Default is %(default)s")
    ap.add_argument('--env-r', default='./env-r', help="Specify R conda env. Default is %(default)s")
    ap.add_argument('--pytest', action='store_true', help="Run pytest unit tests on lib directory")
    ap.add_argument('--urls', action='store_true', help='Check all URLs found across config files')
    ap.add_argument('--r-test', action='store_true', help='Run devtools::test on lcdbwf R package. Set R environment with --env-r.')
    ap.add_argument('--rnaseq', choices=['dryrun', 'standard'])
    ap.add_argument('--references', action='store_true')
    ap.add_argument('--cpus', help='Number of cores to use when calling snakemake, default is %(default)s', default='2')
    args = ap.parse_args()
    if args.get_data:
        get_data(kinds=args.kinds)

    if args.pytest:
        run_pytest()

    if args.urls:
        run_url_check()

    if args.r_test:
        r_package_check()

    if args.rnaseq:
        if args.rnaseq == 'dryrun':
            snakefile('workflows/rnaseq', ['-n', '--use-conda'])

        if args.rnaseq == 'standard':
            snakefile('workflows/rnaseq', ['--use-conda', '-j', args.cpus, '-k', '-p', '-r'])
            sp.run(['python', 'rnaseq_trackhub.py', 'config/config.yaml', 'config/hub_config.yaml'], check=True, cwd='workflows/rnaseq')

    if args.references:
        snakefile('workflows/references', ['--use-conda', '-j', args.cpus, '-k', '-p', '-r', '--configfile', 'config/config.yaml'])
# vim: ft=python
